Const y_origin As Long = 7
Const y_end As Long = 127

Const x_origin As Long = 3
Const x_type_max As Long = x_origin + 6
Const x_arg_name As Long = x_origin + 7
Const x_return As Long = x_origin + 8
Const x_interface_arg As Long = x_origin + 3
Const x_receive_message As Long = x_origin + 10

Sub makeReceiveMessage()
sheet s
'IF名があるy座標を取得
Dim InterfacePosList As New Collection
For i = y_origin To y_end Step 1
    Dim InterfaceName As String
    InterfaceName = s.Cells(i, x_origin).Value
    
    If InterfaceName <> "" Then
        InterfacePosList.Add Item:=i
    End If
Next



'戻り値の型
Dim ReturnType As String
ReturnType = s.Cells(y_pos, x_return).Value

'Interface名
InterfaceName = s.Cells(y_pos, x_origin).Value

'Interfaceの引数の型''''''''''''''''''''''''''''''''''''
Dim InterfaceArgList As New Collection
Dim InterfaceArgPosList As New Collection

For i = 0 To 100 Step 1
    If s.Cells(i + 1, 5).Value = "受信メッセージ" Then
        Exit For
    End If
    
    Dim InterfaceArg As String
    InterfaceArg = s.Cells(i, x_interface_arg).Value
    If InterfaceArg <> "" Then
        InterfaceArgList.Add Item:=InterfaceArg
        InterfaceArgPosList.Add Item:=i
    End If
Next
'''''''''''''''''''''''''''''''''''''''''''''''''''''''

'Receive_Message名
Dim ReceiveMessageNameList As New Collection
Dim ReceiveMessageName As String
Dim ReceiveMessagePosList As New Collection

For i = 0 To 100 Step 1
    If s.Cells(i + 1, x_origin).Value <> "" Then
        Exit For
    End If
    
    If s.Cells(i, 5).Value = "受信メッセージ" Then
        ReceiveMessageName = s.Cells(i, x_receive_message).Value
        If ReceiveMessageName <> "" Then
            ReceiveMessageNameList.Add Item:=ReceiveMessageName
            ReceiveMessagePosList.Add Item:=i
        End If
    End If
Next

'Messageのメンバに対応する引数(子)の座標を取得する処理'''''''''
''受信メッセージ数だけ繰り返す
Dim ChildList As New Collection
Dim ChildPosList As New Collection
Dim Child As String








For i = 0 To 100 Step 1
    If s.Cells(i + 1, 5).Value <> "受信メッセージ" Then
        Exit For
    End If
    
    Child = s.Cells(i, x_arg_name).Value
    If Child <> "" Then
        ChildPosList.Add Item:=i
    End If
    
    Dim hasType As Boolean
    hasType = False
    For J = x_interface_arg To x_type_max Step 1
        If s.Cells(y_pos, x_interface_arg).Value <> "" Then
            hasType = True
            Exit For
        End If
    Next
    
Next

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub s()
    Dim w As String
    ca (w)
End Sub
Function ca(e As String) As Collection
    Dim a  As New Collection
    Set ca = a
End Function

■できなかった点
・期限を決めて業務を実施しなかったこと
　原因
　・なるべくはやくタスクを進めること良いいのかと考えて、タスクの期限を設けなかった
　・タスクを進めていけば、タスクの終わりそうな時間が見えてくるのだと考えた
　・最初のタスクのインプットを掘り下げていかなかった。最初は「自動生成のための表をつくる」とだけ聞いて
　　とりあえず表をつくればいいと考えた
■学んだ点
　・タスクの全体のゴールを把握すること
　　最初のインプットを掘り下げて聞いていくこと
　・タスクのゴールを把握したら、全体のスケージュールを出すこと

■今後の課題
　・タスクをどういう風に掘り下げて聞いていくか
　・タスクの見積もりの仕方を考えること

■できた点
　・vbaの基本的な文法を使用できるようになったこと

■残件
・非同期実行時のマクロ生成が出来ていない
	原因
　	　本番コードを変更してコンパイルしている
・自動生成ができない箇所をコメントアウトすること

・誰がマクロを実行してもコンパイルが通るコードが出力されている
　状態のコードになっていない
　　

